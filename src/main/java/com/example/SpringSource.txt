Spring 容器的 refresh() 创建刷新：
    1，prepareRefresh();刷新前的预处理；
        1，initPropertySources();初始化一些属性设置；由子类实现，自定义属性设置；
        2，getEnvironment().validateRequiredProperties();校验属性设置的合法等；
        3，this.earlyApplicationEvents = new LinkedHashSet<>();保存容器中早期的事件

    2，obtainFreshBeanFactory();获取 BeanFactory
        1，refreshBeanFactory();刷新 BeanFactory
            创建一个 GenericApplicationContext类 this.beanFactory = new DefaultListableBeanFactory();
            设置 BeanFactory 的 id
        2，getBeanFactory(); 返回 GenericApplicationContext类创建的 BeanFactory【DefaultListableBeanFactory】 对象

    3，prepareBeanFactory(beanFactory); BeanFactory的预准备工作（对BeanFactory进行设置）
        1，设置BeanFactory的类加载器、表达式解析器......
        2，添加部分的BeanPostProcessor【如：ApplicationContextAwareProcessor】
        3，设置忽略的自动装配接口【如：EnvironmentAware、EmbeddedValueResolverAware......】 设置这些就不能用@Autowire自动注入
        4，注册可以解析的自动装配，我们可以在任何组件中自动注入
            【如：BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext】
        5，添加部分的BeanPostProcessor【ApplicationListenerDetector】
        6，添加编译时的AspectJ
        7，给容器注册能用的组件：
            environment - StandardEnvironment
            systemProperties - Map<String, Object>
            systemEnvironment - Map<String, Object>

    4，postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行后置处理工作
        由子类通过重写该方法来在BeanFactory创建并预准备完成以后做进一步的设置
=========================================以上是BeanFactory的创建以及预准备工作===============================================
    5，invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor
        BeanFactoryPostProcessor是BeanFactory的后置处理器，在BeanFactory标准初始化完成后执行；
        两大接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
        1，执行BeanFactoryPostProcessor的方法：
            先执行BeanDefinitionRegistryPostProcessor
            1，获取所有的BeanDefinitionRegistryPostProcessor
            2，先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor
                postProcessor.postProcessBeanDefinitionRegistry(registry);
            3，在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
                postProcessor.postProcessBeanDefinitionRegistry(registry);
            4，最后执行没有实现任何优先级或者顺序接口的BeanDefinitionRegistryPostProcessor
                postProcessor.postProcessBeanDefinitionRegistry(registry);

            后执行BeanFactoryPostProcessor的方法
            1，获取所有的BeanFactoryPostProcessor
            2，先执行实现了PriorityOrdered优先级接口的 BeanFactoryPostProcessor
                postProcessor.postProcessBeanFactory(beanFactory);
            3，在执行实现了Ordered顺序接口的 BeanFactoryPostProcessor
                postProcessor.postProcessBeanFactory(beanFactory);
            4，最后执行没有实现任何优先级或者顺序接口的 BeanFactoryPostProcessor
                postProcessor.postProcessBeanFactory(beanFactory);

    6，registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor（Bean的后置处理器）作用：intercept bean creation
        不同接口类型的 BeanPostProcessor；在Bean创建前后的执行时机是不一样的
        BeanPostProcessor
        DestructionAwareBeanPostProcessor
        InstantiationAwareBeanPostProcessor
        SmartInstantiationAwareBeanPostProcessor
        MergedBeanDefinitionPostProcessor
        1，获取所有的 BeanPostProcessor；后置处理器都默认可以通过 PriorityOrdered、Ordered接口指定优先级
        2，先注册 PriorityOrdered优先级接口的 BeanPostProcessor
            把每一个 BeanPostProcessor添加到BeanFactory中，beanFactory.addBeanPostProcessor(postProcessor);
        3，再注册 Ordered接口的BeanPostProcessor
        4，再注册没有实现任何优先级接口的 BeanPostProcessor
        5，最后注册 MergedBeanDefinitionPostProcessor
        6，注册一个 ApplicationListenerDetector，在Bean创建完成后检查该Bean是否是 ApplicationListener
            如果是 ApplicationListener： this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);

    7，initMessageSource();初始化MessageSource组件（做国际化、消息绑定、消息解析）
        1，获取BeanFactory
        2，判断容器中是否有 messageSource的 MessageSource组件
            如果有赋值给 messageSource属性，如果没有创建一个 DelegatingMessageSource对象
            messageSource：取出国际化配置文件中的某个key的值，能按照区域信息获取
        3，把创建好的 MessageSource组件注册到容器中，以后可以自动注入 MessageSource组件
            beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
            MessageSource.getMessage(String code, @Nullable Object[] args, Locale locale)

    8，initApplicationEventMulticaster();初始化事件派发器
        1，获取BeanFactory
        2，判断容器中是否有 ApplicationEventMulticaster组件
            如果没有创建一个 SimpleApplicationEventMulticaster组件
        3，把创建好的 SimpleApplicationEventMulticaster 注册到容器中
            beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);

    9，onRefresh();留给子类进行拓展refresh()使用的空方法
        1，子类重写这个方法，在容器刷新的时候可以自定义逻辑；

    10，registerListeners();在容器中注册项目里面所有的 ApplicationListener组件
        1，从容器中拿到所有的 ApplicationListener组件
        2，将每个监听器添加到事件派发器中
            getApplicationEventMulticaster().addApplicationListener(listener);
        3，派发之前步骤产生的事件
            getApplicationEventMulticaster().multicastEvent(earlyEvent);

    11，finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例Bean
        1，beanFactory.preInstantiateSingletons();初始化剩下的单实例Bean
            1，获取容器中所有的Bean的名字，依次进行初始化和创建对象
            2，获取Bean的定义信息 RootBeanDefinition
            3，判断Bean不是抽象的、单实例的，非懒加载的
                1，判断是否是FactoryBean；是否实现FactoryBean接口的Bean
                2，不是工厂Bean，利用getBean(beanName) 创建对象
                    0，getBean(beanName)
                    1，doGetBean(beanName, null, null, false)
                    2，先获取缓存中保存的单实例Bean，如果能获取到说明这个Bean之前被创建过（所有被创建过的单实例Bean都会被缓存起来）
                        private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);
                    3，缓存中获取不到，开始Bean的创建对象流程
                    4，标记当前Bean已经被创建 markBeanAsCreated(beanName);
                    5，获取Bean的定义信息 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
                    6，获取当前Bean依赖的其它Bean，如果有按照getBean()把依赖的Bean先创建出来 mbd.getDependsOn();
                    7，启动单实例Bean的创建流程
                        1，createBean(beanName, mbd, args);
                        2，Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor先拦截返回代理对象
                            【InstantiationAwareBeanPostProcessor】：提前执行
                                先触发 postProcessBeforeInstantiation()
                                如果有返回值，再触发 postProcessAfterInitialization()
                                源码如下：
                                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
                                if (bean != null) {
                                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
                                }
                        3，如果前面 InstantiationAwareBeanPostProcessor 没有返回代理对象，调用 Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建 Bean对象
                            1，创建Bean实例 createBeanInstance(beanName, mbd, args);
                                @Bean 添加的会调用 -> instantiateUsingFactoryMethod(beanName, mbd, args); 利用工厂方法或者对象的构造器创建出Bean实例
                            2，applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                                调用 MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition()
                            3，【Bean属性赋值】 populateBean(beanName, mbd, instanceWrapper);
                                赋值之前：
                                1，拿到 InstantiationAwareBeanPostProcessor 后置处理器， 执行它的： postProcessAfterInstantiation()
                                2，拿到 InstantiationAwareBeanPostProcessor 后置处理器， 执行他的： postProcessProperties()
                                =============赋值之前 End ==============
                                3，应用 Bean属性的值，为属性利用setter方法等进行赋值
                                    applyPropertyValues(beanName, mbd, bw, pvs);
                            4，【Bean的初始化】 initializeBean(beanName, exposedObject, mbd);
                                1，invokeAwareMethods(beanName, bean); 执行 xxxAware接口的方法
                                    BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
                                2，【执行后置处理器初始化之前】 applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                                    BeanPostProcessor.postProcessBeforeInitialization()
                                3，【执行初始化方法】 invokeInitMethods(beanName, wrappedBean, mbd);
                                    1，如果实现 InitializingBean接口，则执行 InitializingBean.afterPropertiesSet()
                                    2，执行自定义初始化方法 invokeCustomInitMethod(beanName, bean, mbd);
                                4，【执行后置处理器初始化之后】 applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                    BeanPostProcessor.postProcessAfterInitialization()
                            5，注册 Bean 的销毁方法 registerDisposableBeanIfNecessary(beanName, bean, mbd);
                        4，将创建的Bean添加到 singletonObjects缓存中 addSingleton(beanName, singletonObject);
                            IOC容器就是这些Map，很多的Map里面保存了单实例Bean、环境信息等

            4，所有的Bean都创建完以后，在遍历所有的Bean对象
                判断是否实现了 SmartInitializingSingleton接口，如果实现了该接口则调用 SmartInitializingSingleton.afterSingletonsInstantiated();

    12，finishRefresh(); 完成BeanFactory的初始化工作，IOC容器初始化完成
        1，initLifecycleProcessor(); 初始化和生命周期有关的后置处理器，LifecycleProcessor
            判断容器中是否有 LifecycleProcessor 组件，如果没有会创建一个默认的 DefaultLifecycleProcessor 并注册到容器中
            我们可以写一个 LifecycleProcessor的实现类，在BeanFactory的 onRefresh()、onClose() 时进行调用
        2，getLifecycleProcessor().onRefresh(); 拿到前面定义的生命周期处理器，回调 onRefresh()
        3，publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件
        4，LiveBeansView.registerApplicationContext(this);


总结：
    1，Spring容器在启动的时候，先会保存所有注册进来的Bean定义信息；
        1，XML 注册的 Bean，<bean>
        2，注解注册的 Bean，@Service、@Component、@Bean ......
    2，Spring容器会在合适的时机创建这些Bean
        1，用到这个Bean的时候，利用getBean()创建Bean，创建好以后保存在容器中
        2，统一创建剩下所有Bean的时候， finishBeanFactoryInitialization(beanFactory);
    3，后置处理器
        1，每一个Bean创建完成，都会使用各种后置处理器进行处理，来增强Bean的功能
            AutowiredAnnotationBeanPostProcessor：处理自动注入
            AnnotationAwareAspectJAutoProxyCreator：来做AOP
            ...
    4，事件驱动模型
        ApplicationListener：事件监听
        ApplicationEventMulticaster：事件派发




























